// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from '@imagekit/api-mcp/filtering';
import { Metadata, asTextContentResult } from '@imagekit/api-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import ImageKit from '@imagekit/nodejs';

export const metadata: Metadata = {
  resource: 'accounts.urlEndpoints',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/v1/accounts/url-endpoints',
  operationId: 'create-url-endpoint',
};

export const tool: Tool = {
  name: 'create_accounts_url_endpoints',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\n**Note:** This API is currently in beta.  \nCreates a new URL‑endpoint and returns the resulting object.\n\n\n# Response Schema\n```json\n{\n  $ref: '#/$defs/url_endpoint_response',\n  $defs: {\n    url_endpoint_response: {\n      type: 'object',\n      title: 'URL‑endpoint Response',\n      description: 'URL‑endpoint object as returned by the API.',\n      properties: {\n        id: {\n          type: 'string',\n          description: 'Unique identifier for the URL-endpoint. This is generated by ImageKit when you create a new URL-endpoint. For the default URL-endpoint, this is always `default`.'\n        },\n        description: {\n          type: 'string',\n          description: 'Description of the URL endpoint.'\n        },\n        origins: {\n          type: 'array',\n          description: 'Ordered list of origin IDs to try when the file isn’t in the Media Library; ImageKit checks them in the sequence provided. Origin must be created before it can be used in a URL endpoint.',\n          items: {\n            type: 'string',\n            description: 'Unique identifier for the origin. This is generated by ImageKit when you create a new origin.'\n          }\n        },\n        urlPrefix: {\n          type: 'string',\n          description: 'Path segment appended to your base URL to form the endpoint (letters, digits, and hyphens only — or empty for the default endpoint).'\n        },\n        urlRewriter: {\n          anyOf: [            {\n              type: 'object',\n              title: 'Cloudinary URL Rewriter',\n              properties: {\n                preserveAssetDeliveryTypes: {\n                  type: 'boolean',\n                  description: 'Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.'\n                },\n                type: {\n                  type: 'string',\n                  enum: [                    'CLOUDINARY'\n                  ]\n                }\n              },\n              required: [                'preserveAssetDeliveryTypes',\n                'type'\n              ]\n            },\n            {\n              type: 'object',\n              title: 'Imgix URL Rewriter',\n              properties: {\n                type: {\n                  type: 'string',\n                  enum: [                    'IMGIX'\n                  ]\n                }\n              },\n              required: [                'type'\n              ]\n            },\n            {\n              type: 'object',\n              title: 'Akamai URL Rewriter',\n              properties: {\n                type: {\n                  type: 'string',\n                  enum: [                    'AKAMAI'\n                  ]\n                }\n              },\n              required: [                'type'\n              ]\n            }\n          ],\n          description: 'Configuration for third-party URL rewriting.'\n        }\n      },\n      required: [        'id',\n        'description',\n        'origins',\n        'urlPrefix'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      description: {
        type: 'string',
        description: 'Description of the URL endpoint.',
      },
      origins: {
        type: 'array',
        description:
          'Ordered list of origin IDs to try when the file isn’t in the Media Library; ImageKit checks them in the sequence provided. Origin must be created before it can be used in a URL endpoint.',
        items: {
          type: 'string',
          description:
            'Unique identifier for the origin. This is generated by ImageKit when you create a new origin.',
        },
      },
      urlPrefix: {
        type: 'string',
        description:
          'Path segment appended to your base URL to form the endpoint (letters, digits, and hyphens only — or empty for the default endpoint).',
      },
      urlRewriter: {
        anyOf: [
          {
            type: 'object',
            title: 'Cloudinary URL Rewriter',
            properties: {
              type: {
                type: 'string',
                enum: ['CLOUDINARY'],
              },
              preserveAssetDeliveryTypes: {
                type: 'boolean',
                description: 'Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.',
              },
            },
            required: ['type'],
          },
          {
            type: 'object',
            title: 'Imgix URL Rewriter',
            properties: {
              type: {
                type: 'string',
                enum: ['IMGIX'],
              },
            },
            required: ['type'],
          },
          {
            type: 'object',
            title: 'Akamai URL Rewriter',
            properties: {
              type: {
                type: 'string',
                enum: ['AKAMAI'],
              },
            },
            required: ['type'],
          },
        ],
        description: 'Configuration for third-party URL rewriting.',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['description'],
  },
  annotations: {},
};

export const handler = async (client: ImageKit, args: Record<string, unknown> | undefined) => {
  const { jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.accounts.urlEndpoints.create(body)));
};

export default { metadata, tool, handler };
