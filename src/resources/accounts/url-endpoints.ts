// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';
import { path } from '../../internal/utils/path';

export class URLEndpoints extends APIResource {
  /**
   * **Note:** This API is currently in beta.
   * Creates a new URL‑endpoint and returns the resulting object.
   *
   * @example
   * ```ts
   * const urlEndpointResponse =
   *   await client.accounts.urlEndpoints.create({
   *     description: 'My custom URL endpoint',
   *   });
   * ```
   */
  create(body: URLEndpointCreateParams, options?: RequestOptions): APIPromise<URLEndpointResponse> {
    return this._client.post('/v1/accounts/url-endpoints', { body, ...options });
  }

  /**
   * **Note:** This API is currently in beta.
   * Updates the URL‑endpoint identified by `id` and returns the updated object.
   *
   * @example
   * ```ts
   * const urlEndpointResponse =
   *   await client.accounts.urlEndpoints.update('id', {
   *     description: 'My custom URL endpoint',
   *   });
   * ```
   */
  update(
    id: string,
    body: URLEndpointUpdateParams,
    options?: RequestOptions,
  ): APIPromise<URLEndpointResponse> {
    return this._client.put(path`/v1/accounts/url-endpoints/${id}`, { body, ...options });
  }

  /**
   * **Note:** This API is currently in beta.
   * Returns an array of all URL‑endpoints configured including the default
   * URL-endpoint generated by ImageKit during account creation.
   *
   * @example
   * ```ts
   * const urlEndpointResponses =
   *   await client.accounts.urlEndpoints.list();
   * ```
   */
  list(options?: RequestOptions): APIPromise<URLEndpointListResponse> {
    return this._client.get('/v1/accounts/url-endpoints', options);
  }

  /**
   * **Note:** This API is currently in beta.
   * Deletes the URL‑endpoint identified by `id`. You cannot delete the default
   * URL‑endpoint created by ImageKit during account creation.
   *
   * @example
   * ```ts
   * await client.accounts.urlEndpoints.delete('id');
   * ```
   */
  delete(id: string, options?: RequestOptions): APIPromise<void> {
    return this._client.delete(path`/v1/accounts/url-endpoints/${id}`, {
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * **Note:** This API is currently in beta.
   * Retrieves the URL‑endpoint identified by `id`.
   *
   * @example
   * ```ts
   * const urlEndpointResponse =
   *   await client.accounts.urlEndpoints.get('id');
   * ```
   */
  get(id: string, options?: RequestOptions): APIPromise<URLEndpointResponse> {
    return this._client.get(path`/v1/accounts/url-endpoints/${id}`, options);
  }
}

/**
 * Schema for URL endpoint resource.
 */
export interface URLEndpointRequest {
  /**
   * Description of the URL endpoint.
   */
  description: string;

  /**
   * Ordered list of origin IDs to try when the file isn’t in the Media Library;
   * ImageKit checks them in the sequence provided. Origin must be created before it
   * can be used in a URL endpoint.
   */
  origins?: Array<string>;

  /**
   * Path segment appended to your base URL to form the endpoint (letters, digits,
   * and hyphens only — or empty for the default endpoint).
   */
  urlPrefix?: string;

  /**
   * Configuration for third-party URL rewriting.
   */
  urlRewriter?: URLEndpointRequest.Cloudinary | URLEndpointRequest.Imgix | URLEndpointRequest.Akamai;
}

export namespace URLEndpointRequest {
  export interface Cloudinary {
    type: 'CLOUDINARY';

    /**
     * Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
     */
    preserveAssetDeliveryTypes?: boolean;
  }

  export interface Imgix {
    type: 'IMGIX';
  }

  export interface Akamai {
    type: 'AKAMAI';
  }
}

/**
 * URL‑endpoint object as returned by the API.
 */
export interface URLEndpointResponse {
  /**
   * Unique identifier for the URL-endpoint. This is generated by ImageKit when you
   * create a new URL-endpoint. For the default URL-endpoint, this is always
   * `default`.
   */
  id: string;

  /**
   * Description of the URL endpoint.
   */
  description: string;

  /**
   * Ordered list of origin IDs to try when the file isn’t in the Media Library;
   * ImageKit checks them in the sequence provided. Origin must be created before it
   * can be used in a URL endpoint.
   */
  origins: Array<string>;

  /**
   * Path segment appended to your base URL to form the endpoint (letters, digits,
   * and hyphens only — or empty for the default endpoint).
   */
  urlPrefix: string;

  /**
   * Configuration for third-party URL rewriting.
   */
  urlRewriter?: URLEndpointResponse.Cloudinary | URLEndpointResponse.Imgix | URLEndpointResponse.Akamai;
}

export namespace URLEndpointResponse {
  export interface Cloudinary {
    /**
     * Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
     */
    preserveAssetDeliveryTypes: boolean;

    type: 'CLOUDINARY';
  }

  export interface Imgix {
    type: 'IMGIX';
  }

  export interface Akamai {
    type: 'AKAMAI';
  }
}

export type URLEndpointListResponse = Array<URLEndpointResponse>;

export interface URLEndpointCreateParams {
  /**
   * Description of the URL endpoint.
   */
  description: string;

  /**
   * Ordered list of origin IDs to try when the file isn’t in the Media Library;
   * ImageKit checks them in the sequence provided. Origin must be created before it
   * can be used in a URL endpoint.
   */
  origins?: Array<string>;

  /**
   * Path segment appended to your base URL to form the endpoint (letters, digits,
   * and hyphens only — or empty for the default endpoint).
   */
  urlPrefix?: string;

  /**
   * Configuration for third-party URL rewriting.
   */
  urlRewriter?:
    | URLEndpointCreateParams.Cloudinary
    | URLEndpointCreateParams.Imgix
    | URLEndpointCreateParams.Akamai;
}

export namespace URLEndpointCreateParams {
  export interface Cloudinary {
    type: 'CLOUDINARY';

    /**
     * Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
     */
    preserveAssetDeliveryTypes?: boolean;
  }

  export interface Imgix {
    type: 'IMGIX';
  }

  export interface Akamai {
    type: 'AKAMAI';
  }
}

export interface URLEndpointUpdateParams {
  /**
   * Description of the URL endpoint.
   */
  description: string;

  /**
   * Ordered list of origin IDs to try when the file isn’t in the Media Library;
   * ImageKit checks them in the sequence provided. Origin must be created before it
   * can be used in a URL endpoint.
   */
  origins?: Array<string>;

  /**
   * Path segment appended to your base URL to form the endpoint (letters, digits,
   * and hyphens only — or empty for the default endpoint).
   */
  urlPrefix?: string;

  /**
   * Configuration for third-party URL rewriting.
   */
  urlRewriter?:
    | URLEndpointUpdateParams.Cloudinary
    | URLEndpointUpdateParams.Imgix
    | URLEndpointUpdateParams.Akamai;
}

export namespace URLEndpointUpdateParams {
  export interface Cloudinary {
    type: 'CLOUDINARY';

    /**
     * Whether to preserve `<asset_type>/<delivery_type>` in the rewritten URL.
     */
    preserveAssetDeliveryTypes?: boolean;
  }

  export interface Imgix {
    type: 'IMGIX';
  }

  export interface Akamai {
    type: 'AKAMAI';
  }
}

export declare namespace URLEndpoints {
  export {
    type URLEndpointRequest as URLEndpointRequest,
    type URLEndpointResponse as URLEndpointResponse,
    type URLEndpointListResponse as URLEndpointListResponse,
    type URLEndpointCreateParams as URLEndpointCreateParams,
    type URLEndpointUpdateParams as URLEndpointUpdateParams,
  };
}
