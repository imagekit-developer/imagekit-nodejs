// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';
import { path } from '../../internal/utils/path';

export class Origins extends APIResource {
  /**
   * **Note:** This API is currently in beta.
   * Creates a new origin and returns the origin object.
   *
   * @example
   * ```ts
   * const origin = await client.accounts.origins.create({
   *   accessKey: 'AKIAIOSFODNN7EXAMPLE',
   *   bucket: 'product-images',
   *   name: 'US S3 Storage',
   *   secretKey: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',
   *   type: 'S3',
   * });
   * ```
   */
  create(body: OriginCreateParams, options?: RequestOptions): APIPromise<OriginCreateResponse> {
    return this._client.post('/v1/accounts/origins', { body, ...options });
  }

  /**
   * **Note:** This API is currently in beta.
   * Updates the origin identified by `id` and returns the updated origin object.
   *
   * @example
   * ```ts
   * const origin = await client.accounts.origins.update('id', {
   *   accessKey: 'AKIAIOSFODNN7EXAMPLE',
   *   bucket: 'product-images',
   *   name: 'US S3 Storage',
   *   secretKey: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',
   *   type: 'S3',
   * });
   * ```
   */
  update(id: string, body: OriginUpdateParams, options?: RequestOptions): APIPromise<OriginUpdateResponse> {
    return this._client.put(path`/v1/accounts/origins/${id}`, { body, ...options });
  }

  /**
   * **Note:** This API is currently in beta.
   * Returns an array of all configured origins for the current account.
   *
   * @example
   * ```ts
   * const origins = await client.accounts.origins.list();
   * ```
   */
  list(options?: RequestOptions): APIPromise<OriginListResponse> {
    return this._client.get('/v1/accounts/origins', options);
  }

  /**
   * **Note:** This API is currently in beta.
   * Permanently removes the origin identified by `id`. If the origin is in use by
   * any URLâ€‘endpoints, the API will return an error.
   *
   * @example
   * ```ts
   * await client.accounts.origins.delete('id');
   * ```
   */
  delete(id: string, options?: RequestOptions): APIPromise<void> {
    return this._client.delete(path`/v1/accounts/origins/${id}`, {
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
    });
  }

  /**
   * **Note:** This API is currently in beta.
   * Retrieves the origin identified by `id`.
   *
   * @example
   * ```ts
   * const origin = await client.accounts.origins.get('id');
   * ```
   */
  get(id: string, options?: RequestOptions): APIPromise<OriginGetResponse> {
    return this._client.get(path`/v1/accounts/origins/${id}`, options);
  }
}

/**
 * Origin object as returned by the API (sensitive fields removed).
 */
export type OriginCreateResponse =
  | OriginCreateResponse.S3
  | OriginCreateResponse.S3Compatible
  | OriginCreateResponse.CloudinaryBackup
  | OriginCreateResponse.WebFolder
  | OriginCreateResponse.WebProxy
  | OriginCreateResponse.GoogleCloudStorageGcs
  | OriginCreateResponse.AzureBlobStorage
  | OriginCreateResponse.AkeneoPim;

export namespace OriginCreateResponse {
  export interface S3 {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    type: 'S3';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface S3Compatible {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Custom S3-compatible endpoint.
     */
    endpoint: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    /**
     * Use path-style S3 URLs?
     */
    s3ForcePathStyle: boolean;

    type: 'S3_COMPATIBLE';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface CloudinaryBackup {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    type: 'CLOUDINARY_BACKUP';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface WebFolder {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Root URL for the web folder origin.
     */
    baseUrl: string;

    /**
     * Forward the Host header to origin?
     */
    forwardHostHeaderToOrigin: boolean;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'WEB_FOLDER';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface WebProxy {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'WEB_PROXY';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface GoogleCloudStorageGcs {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    bucket: string;

    clientEmail: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    prefix: string;

    type: 'GCS';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface AzureBlobStorage {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    accountName: string;

    container: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    prefix: string;

    type: 'AZURE_BLOB';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface AkeneoPim {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Akeneo instance base URL.
     */
    baseUrl: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }
}

/**
 * Origin object as returned by the API (sensitive fields removed).
 */
export type OriginUpdateResponse =
  | OriginUpdateResponse.S3
  | OriginUpdateResponse.S3Compatible
  | OriginUpdateResponse.CloudinaryBackup
  | OriginUpdateResponse.WebFolder
  | OriginUpdateResponse.WebProxy
  | OriginUpdateResponse.GoogleCloudStorageGcs
  | OriginUpdateResponse.AzureBlobStorage
  | OriginUpdateResponse.AkeneoPim;

export namespace OriginUpdateResponse {
  export interface S3 {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    type: 'S3';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface S3Compatible {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Custom S3-compatible endpoint.
     */
    endpoint: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    /**
     * Use path-style S3 URLs?
     */
    s3ForcePathStyle: boolean;

    type: 'S3_COMPATIBLE';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface CloudinaryBackup {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    type: 'CLOUDINARY_BACKUP';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface WebFolder {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Root URL for the web folder origin.
     */
    baseUrl: string;

    /**
     * Forward the Host header to origin?
     */
    forwardHostHeaderToOrigin: boolean;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'WEB_FOLDER';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface WebProxy {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'WEB_PROXY';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface GoogleCloudStorageGcs {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    bucket: string;

    clientEmail: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    prefix: string;

    type: 'GCS';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface AzureBlobStorage {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    accountName: string;

    container: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    prefix: string;

    type: 'AZURE_BLOB';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface AkeneoPim {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Akeneo instance base URL.
     */
    baseUrl: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }
}

export type OriginListResponse = Array<
  | OriginListResponse.S3
  | OriginListResponse.S3Compatible
  | OriginListResponse.CloudinaryBackup
  | OriginListResponse.WebFolder
  | OriginListResponse.WebProxy
  | OriginListResponse.GoogleCloudStorageGcs
  | OriginListResponse.AzureBlobStorage
  | OriginListResponse.AkeneoPim
>;

export namespace OriginListResponse {
  export interface S3 {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    type: 'S3';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface S3Compatible {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Custom S3-compatible endpoint.
     */
    endpoint: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    /**
     * Use path-style S3 URLs?
     */
    s3ForcePathStyle: boolean;

    type: 'S3_COMPATIBLE';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface CloudinaryBackup {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    type: 'CLOUDINARY_BACKUP';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface WebFolder {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Root URL for the web folder origin.
     */
    baseUrl: string;

    /**
     * Forward the Host header to origin?
     */
    forwardHostHeaderToOrigin: boolean;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'WEB_FOLDER';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface WebProxy {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'WEB_PROXY';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface GoogleCloudStorageGcs {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    bucket: string;

    clientEmail: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    prefix: string;

    type: 'GCS';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface AzureBlobStorage {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    accountName: string;

    container: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    prefix: string;

    type: 'AZURE_BLOB';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface AkeneoPim {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Akeneo instance base URL.
     */
    baseUrl: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }
}

/**
 * Origin object as returned by the API (sensitive fields removed).
 */
export type OriginGetResponse =
  | OriginGetResponse.S3
  | OriginGetResponse.S3Compatible
  | OriginGetResponse.CloudinaryBackup
  | OriginGetResponse.WebFolder
  | OriginGetResponse.WebProxy
  | OriginGetResponse.GoogleCloudStorageGcs
  | OriginGetResponse.AzureBlobStorage
  | OriginGetResponse.AkeneoPim;

export namespace OriginGetResponse {
  export interface S3 {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    type: 'S3';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface S3Compatible {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Custom S3-compatible endpoint.
     */
    endpoint: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    /**
     * Use path-style S3 URLs?
     */
    s3ForcePathStyle: boolean;

    type: 'S3_COMPATIBLE';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface CloudinaryBackup {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Path prefix inside the bucket.
     */
    prefix: string;

    type: 'CLOUDINARY_BACKUP';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface WebFolder {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Root URL for the web folder origin.
     */
    baseUrl: string;

    /**
     * Forward the Host header to origin?
     */
    forwardHostHeaderToOrigin: boolean;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'WEB_FOLDER';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface WebProxy {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'WEB_PROXY';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface GoogleCloudStorageGcs {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    bucket: string;

    clientEmail: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    prefix: string;

    type: 'GCS';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface AzureBlobStorage {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    accountName: string;

    container: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    prefix: string;

    type: 'AZURE_BLOB';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }

  export interface AkeneoPim {
    /**
     * Unique identifier for the origin. This is generated by ImageKit when you create
     * a new origin.
     */
    id: string;

    /**
     * Akeneo instance base URL.
     */
    baseUrl: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader: boolean;

    /**
     * Display name of the origin.
     */
    name: string;

    type: 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;
  }
}

export type OriginCreateParams =
  | OriginCreateParams.S3Origin
  | OriginCreateParams.S3CompatibleOrigin
  | OriginCreateParams.CloudinaryBackupOrigin
  | OriginCreateParams.WebFolderOrigin
  | OriginCreateParams.WebProxyOrigin
  | OriginCreateParams.GcsOrigin
  | OriginCreateParams.AzureBlobOrigin
  | OriginCreateParams.AkeneoPimOrigin;

export declare namespace OriginCreateParams {
  export interface S3Origin {
    /**
     * Access key for the bucket.
     */
    accessKey: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Secret key for the bucket.
     */
    secretKey: string;

    type:
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    /**
     * Path prefix inside the bucket.
     */
    prefix?: string;
  }

  export interface S3CompatibleOrigin {
    /**
     * Access key for the bucket.
     */
    accessKey: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Custom S3-compatible endpoint.
     */
    endpoint: string;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Secret key for the bucket.
     */
    secretKey: string;

    type:
      | 'S3_COMPATIBLE'
      | 'S3'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    /**
     * Path prefix inside the bucket.
     */
    prefix?: string;

    /**
     * Use path-style S3 URLs?
     */
    s3ForcePathStyle?: boolean;
  }

  export interface CloudinaryBackupOrigin {
    /**
     * Access key for the bucket.
     */
    accessKey: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Secret key for the bucket.
     */
    secretKey: string;

    type:
      | 'CLOUDINARY_BACKUP'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    /**
     * Path prefix inside the bucket.
     */
    prefix?: string;
  }

  export interface WebFolderOrigin {
    /**
     * Root URL for the web folder origin.
     */
    baseUrl: string;

    /**
     * Display name of the origin.
     */
    name: string;

    type:
      | 'WEB_FOLDER'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Forward the Host header to origin?
     */
    forwardHostHeaderToOrigin?: boolean;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;
  }

  export interface WebProxyOrigin {
    /**
     * Display name of the origin.
     */
    name: string;

    type:
      | 'WEB_PROXY'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;
  }

  export interface GcsOrigin {
    bucket: string;

    clientEmail: string;

    /**
     * Display name of the origin.
     */
    name: string;

    privateKey: string;

    type:
      | 'GCS'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    prefix?: string;
  }

  export interface AzureBlobOrigin {
    accountName: string;

    container: string;

    /**
     * Display name of the origin.
     */
    name: string;

    sasToken: string;

    type:
      | 'AZURE_BLOB'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    prefix?: string;
  }

  export interface AkeneoPimOrigin {
    /**
     * Akeneo instance base URL.
     */
    baseUrl: string;

    /**
     * Akeneo API client ID.
     */
    clientId: string;

    /**
     * Akeneo API client secret.
     */
    clientSecret: string;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Akeneo API password.
     */
    password: string;

    type:
      | 'AKENEO_PIM'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB';

    /**
     * Akeneo API username.
     */
    username: string;

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;
  }
}

export type OriginUpdateParams =
  | OriginUpdateParams.S3Origin
  | OriginUpdateParams.S3CompatibleOrigin
  | OriginUpdateParams.CloudinaryBackupOrigin
  | OriginUpdateParams.WebFolderOrigin
  | OriginUpdateParams.WebProxyOrigin
  | OriginUpdateParams.GcsOrigin
  | OriginUpdateParams.AzureBlobOrigin
  | OriginUpdateParams.AkeneoPimOrigin;

export declare namespace OriginUpdateParams {
  export interface S3Origin {
    /**
     * Access key for the bucket.
     */
    accessKey: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Secret key for the bucket.
     */
    secretKey: string;

    type:
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    /**
     * Path prefix inside the bucket.
     */
    prefix?: string;
  }

  export interface S3CompatibleOrigin {
    /**
     * Access key for the bucket.
     */
    accessKey: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Custom S3-compatible endpoint.
     */
    endpoint: string;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Secret key for the bucket.
     */
    secretKey: string;

    type:
      | 'S3_COMPATIBLE'
      | 'S3'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    /**
     * Path prefix inside the bucket.
     */
    prefix?: string;

    /**
     * Use path-style S3 URLs?
     */
    s3ForcePathStyle?: boolean;
  }

  export interface CloudinaryBackupOrigin {
    /**
     * Access key for the bucket.
     */
    accessKey: string;

    /**
     * S3 bucket name.
     */
    bucket: string;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Secret key for the bucket.
     */
    secretKey: string;

    type:
      | 'CLOUDINARY_BACKUP'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    /**
     * Path prefix inside the bucket.
     */
    prefix?: string;
  }

  export interface WebFolderOrigin {
    /**
     * Root URL for the web folder origin.
     */
    baseUrl: string;

    /**
     * Display name of the origin.
     */
    name: string;

    type:
      | 'WEB_FOLDER'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Forward the Host header to origin?
     */
    forwardHostHeaderToOrigin?: boolean;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;
  }

  export interface WebProxyOrigin {
    /**
     * Display name of the origin.
     */
    name: string;

    type:
      | 'WEB_PROXY'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'GCS'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;
  }

  export interface GcsOrigin {
    bucket: string;

    clientEmail: string;

    /**
     * Display name of the origin.
     */
    name: string;

    privateKey: string;

    type:
      | 'GCS'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'AZURE_BLOB'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    prefix?: string;
  }

  export interface AzureBlobOrigin {
    accountName: string;

    container: string;

    /**
     * Display name of the origin.
     */
    name: string;

    sasToken: string;

    type:
      | 'AZURE_BLOB'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AKENEO_PIM';

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;

    prefix?: string;
  }

  export interface AkeneoPimOrigin {
    /**
     * Akeneo instance base URL.
     */
    baseUrl: string;

    /**
     * Akeneo API client ID.
     */
    clientId: string;

    /**
     * Akeneo API client secret.
     */
    clientSecret: string;

    /**
     * Display name of the origin.
     */
    name: string;

    /**
     * Akeneo API password.
     */
    password: string;

    type:
      | 'AKENEO_PIM'
      | 'S3'
      | 'S3_COMPATIBLE'
      | 'CLOUDINARY_BACKUP'
      | 'WEB_FOLDER'
      | 'WEB_PROXY'
      | 'GCS'
      | 'AZURE_BLOB';

    /**
     * Akeneo API username.
     */
    username: string;

    /**
     * URL used in the Canonical header (if enabled).
     */
    baseUrlForCanonicalHeader?: string;

    /**
     * Whether to send a Canonical header.
     */
    includeCanonicalHeader?: boolean;
  }
}

export declare namespace Origins {
  export {
    type OriginCreateResponse as OriginCreateResponse,
    type OriginUpdateResponse as OriginUpdateResponse,
    type OriginListResponse as OriginListResponse,
    type OriginGetResponse as OriginGetResponse,
    type OriginCreateParams as OriginCreateParams,
    type OriginUpdateParams as OriginUpdateParams,
  };
}
