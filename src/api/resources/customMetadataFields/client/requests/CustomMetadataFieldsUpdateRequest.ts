/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         label: "price",
 *         schema: {
 *             minValue: 1000,
 *             maxValue: 3000
 *         }
 *     }
 */
export interface CustomMetadataFieldsUpdateRequest {
    /** Human readable name of the custom metadata field. This should be unique across all non deleted custom metadata fields. This name is displayed as form field label to the users while setting field value on an asset in the media library UI. This parameter is required if `schema` is not provided. */
    label?: string;
    /** An object that describes the rules for the custom metadata key. This parameter is required if `label` is not provided. Note: `type` cannot be updated and will be ignored if sent with the `schema`. The schema will be validated as per the existing `type`. */
    schema?: CustomMetadataFieldsUpdateRequest.Schema;
}

export namespace CustomMetadataFieldsUpdateRequest {
    /**
     * An object that describes the rules for the custom metadata key. This parameter is required if `label` is not provided. Note: `type` cannot be updated and will be ignored if sent with the `schema`. The schema will be validated as per the existing `type`.
     */
    export interface Schema {
        /** An array of allowed values. This property is only required if `type` property is set to `SingleSelect` or `MultiSelect`. */
        selectOptions?: Schema.SelectOptions.Item[];
        /** The default value for this custom metadata field. This property is only required if `isValueRequired` property is set to `true`. The value should match the `type` of custom metadata field. */
        defaultValue?: Schema.DefaultValue;
        /** Sets this custom metadata field as required. Setting custom metadata fields on an asset will throw error if the value for all required fields are not present in upload or update asset API request body. */
        isValueRequired?: boolean;
        /** Minimum value of the field. Only set this property if field type is `Date` or `Number`. For `Date` type field, set the minimum date in ISO8601 string format. For `Number` type field, set the minimum numeric value. */
        minValue?: Schema.MinValue;
        /** Maximum value of the field. Only set this property if field type is `Date` or `Number`. For `Date` type field, set the minimum date in ISO8601 string format. For `Number` type field, set the minimum numeric value. */
        maxValue?: Schema.MaxValue;
        /** Minimum length of string. Only set this property if `type` is set to `Text` or `Textarea`. */
        minLength?: number;
        /** Maximum length of string. Only set this property if `type` is set to `Text` or `Textarea`. */
        maxLength?: number;
    }

    export namespace Schema {
        export type SelectOptions = SelectOptions.Item[];

        export namespace SelectOptions {
            export type Item = string | number | boolean;
        }

        /**
         * The default value for this custom metadata field. This property is only required if `isValueRequired` property is set to `true`. The value should match the `type` of custom metadata field.
         */
        export type DefaultValue =
            | string
            | number
            | boolean
            /**
             * Default value should be of type array when custom metadata field type is set to `MultiSelect`. */
            | (string | number | boolean)[];
        /**
         * Minimum value of the field. Only set this property if field type is `Date` or `Number`. For `Date` type field, set the minimum date in ISO8601 string format. For `Number` type field, set the minimum numeric value.
         */
        export type MinValue = string | number;
        /**
         * Maximum value of the field. Only set this property if field type is `Date` or `Number`. For `Date` type field, set the minimum date in ISO8601 string format. For `Number` type field, set the minimum numeric value.
         */
        export type MaxValue = string | number;
    }
}
