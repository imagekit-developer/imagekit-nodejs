/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as fs from "fs";
import * as core from "../../../../../../../../../core/index.js";
import * as ImageKit from "../../../../../../../../index.js";

/**
 * @example
 *     {
 *         file: fs.createReadStream("/path/to/your/file"),
 *         fileName: "fileName"
 *     }
 *
 * @example
 *     {
 *         file: fs.createReadStream("/path/to/your/file"),
 *         fileName: "fileName"
 *     }
 *
 * @example
 *     {
 *         file: fs.createReadStream("/path/to/your/file"),
 *         fileName: "fileName"
 *     }
 */
export interface FileUploadV2 {
    /**
     * The API accepts any of the following:
     *
     * - **Binary data** – send the raw bytes as `multipart/form-data`.
     * - **HTTP / HTTPS URL** – a publicly reachable URL that ImageKit’s servers can fetch.
     * - **Base64 string** – the file encoded as a Base64 data URI or plain Base64.
     *
     * When supplying a URL, the server must receive the response headers within 8 seconds; otherwise the request fails with 400 Bad Request.
     */
    file: core.file.Uploadable.FileLike;
    /** The name with which the file has to be uploaded. */
    fileName: string;
    /**
     * This is the client-generated JSON Web Token (JWT). The ImageKit.io server uses it to authenticate and check that the upload request parameters have not been tampered with after the token has been generated. Learn how to create the token on the page below. This field is only required for authentication when uploading a file from the client side.
     *
     *
     * **Note**: Sending a JWT that has been used in the past will result in a validation error. Even if your previous request resulted in an error, you should always send a new token.
     *
     *
     * **⚠️Warning**: JWT must be generated on the server-side because it is generated using your account's private API key. This field is required for authentication when uploading a file from the client-side.
     */
    token?: string;
    /**
     * Whether to use a unique filename for this file or not.
     *
     * If `true`, ImageKit.io will add a unique suffix to the filename parameter to get a unique filename.
     *
     * If `false`, then the image is uploaded with the provided filename parameter, and any existing file with the same name is replaced.
     */
    useUniqueFileName?: boolean;
    /**
     * Set the tags while uploading the file.
     * Provide an array of tag strings (e.g. `["tag1", "tag2", "tag3"]`). The combined length of all tag characters must not exceed 500, and the `%` character is not allowed.
     * If this field is not specified and the file is overwritten, the existing tags will be removed.
     */
    tags?: string[];
    /** The folder path in which the image has to be uploaded. If the folder(s) didn't exist before, a new folder(s) is created. Using multiple `/` creates a nested folder. */
    folder?: string;
    /**
     * Whether to mark the file as private or not.
     *
     * If `true`, the file is marked as private and is accessible only using named transformation or signed URL.
     */
    isPrivateFile?: boolean;
    /**
     * Whether to upload file as published or not.
     *
     * If `false`, the file is marked as unpublished, which restricts access to the file only via the media library. Files in draft or unpublished state can only be publicly accessed after being published.
     *
     * The option to upload in draft state is only available in custom enterprise pricing plans.
     */
    isPublished?: boolean;
    /**
     * Define an important area in the image. This is only relevant for image type files.
     *
     *   - To be passed as a string with the x and y coordinates of the top-left corner, and width and height of the area of interest in the format `x,y,width,height`. For example - `10,10,100,100`
     *   - Can be used with fo-customtransformation.
     *   - If this field is not specified and the file is overwritten, then customCoordinates will be removed.
     */
    customCoordinates?: string;
    /** Array of response field keys to include in the API response body. */
    responseFields?: FileUploadV2.ResponseFields.Item[];
    /** Array of extensions to be applied to the image. Each extension can be configured with specific parameters based on the extension type. */
    extensions?: FileUploadV2.Extensions.Item[];
    /** The final status of extensions after they have completed execution will be delivered to this endpoint as a POST request. [Learn more](/docs/api-reference/digital-asset-management-dam/managing-assets/update-file-details#webhook-payload-structure) about the webhook payload structure. */
    webhookUrl?: string;
    /** If `false` and `useUniqueFileName` is also `false`, and a file already exists at the exact location, upload API will return an error immediately. */
    overwriteFile?: boolean;
    /** If set to `true` and a file already exists at the exact location, its AITags will be removed. Set `overwriteAITags` to `false` to preserve AITags. */
    overwriteAITags?: boolean;
    /** If the request does not have `tags`, and a file already exists at the exact location, existing tags will be removed. */
    overwriteTags?: boolean;
    /** If the request does not have `customMetadata`, and a file already exists at the exact location, existing customMetadata will be removed. */
    overwriteCustomMetadata?: boolean;
    /** JSON key-value pairs to associate with the asset. Create the custom metadata fields before setting these values. */
    customMetadata?: Record<string, unknown>;
    transformation?: ImageKit.TransformationObject;
    /**
     * Server-side checks to run on the asset.
     * Read more about [Upload API checks](/docs/api-reference/upload-file/upload-file-v2#upload-api-checks).
     */
    checks?: string;
    /** Optional text to describe the contents of the file. */
    description?: string;
}

export namespace FileUploadV2 {
    export type ResponseFields = ResponseFields.Item[];

    export namespace ResponseFields {
        export type Item =
            | "tags"
            | "customCoordinates"
            | "isPrivateFile"
            | "embeddedMetadata"
            | "isPublished"
            | "customMetadata"
            | "metadata";
        export const Item = {
            Tags: "tags",
            CustomCoordinates: "customCoordinates",
            IsPrivateFile: "isPrivateFile",
            EmbeddedMetadata: "embeddedMetadata",
            IsPublished: "isPublished",
            CustomMetadata: "customMetadata",
            Metadata: "metadata",
        } as const;
    }

    export type Extensions = Extensions.Item[];

    export namespace Extensions {
        export type Item =
            | ImageKit.RemovedotBgExtension
            | ImageKit.AutoTaggingExtension
            | ImageKit.AutoDescriptionExtension;
    }
}
