/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as ImageKit from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Bulk {
    export interface Options {
        environment?: core.Supplier<environments.ImageKitEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        username: core.Supplier<string>;
        password: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Bulk {
    protected readonly _options: Bulk.Options;

    constructor(_options: Bulk.Options) {
        this._options = _options;
    }

    /**
     * This API deletes multiple files and all their file versions permanently.
     *
     * Note: If a file or specific transformation has been requested in the past, then the response is cached. Deleting a file does not purge the cache. You can purge the cache using purge cache API.
     *
     * A maximum of 100 files can be deleted at a time.
     *
     * @param {ImageKit.files.BulkDeleteRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ImageKit.BadRequestError}
     * @throws {@link ImageKit.UnauthorizedError}
     * @throws {@link ImageKit.ForbiddenError}
     * @throws {@link ImageKit.NotFoundError}
     * @throws {@link ImageKit.TooManyRequestsError}
     *
     * @example
     *     await client.files.bulk.delete({
     *         fileIds: ["598821f949c0a938d57563bd", "598821f949c0a938d57563be"]
     *     })
     */
    public delete(
        request: ImageKit.files.BulkDeleteRequest,
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<ImageKit.files.BulkDeleteResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(request, requestOptions));
    }

    private async __delete(
        request: ImageKit.files.BulkDeleteRequest,
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<ImageKit.files.BulkDeleteResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ImageKitEnvironment.Default,
                "v1/files/batch/deleteByFileIds",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as ImageKit.files.BulkDeleteResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ImageKit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new ImageKit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ImageKit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new ImageKit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new ImageKit.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ImageKitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ImageKitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ImageKitTimeoutError(
                    "Timeout exceeded when calling POST /v1/files/batch/deleteByFileIds.",
                );
            case "unknown":
                throw new errors.ImageKitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This API adds tags to multiple files in bulk. A maximum of 50 files can be specified at a time.
     *
     * @param {ImageKit.files.BulkAddTagsRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ImageKit.BadRequestError}
     * @throws {@link ImageKit.UnauthorizedError}
     * @throws {@link ImageKit.ForbiddenError}
     * @throws {@link ImageKit.NotFoundError}
     * @throws {@link ImageKit.TooManyRequestsError}
     *
     * @example
     *     await client.files.bulk.addTags({
     *         fileIds: ["598821f949c0a938d57563bd", "598821f949c0a938d57563be"],
     *         tags: ["t-shirt", "round-neck", "sale2019"]
     *     })
     */
    public addTags(
        request: ImageKit.files.BulkAddTagsRequest,
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<ImageKit.files.BulkAddTagsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__addTags(request, requestOptions));
    }

    private async __addTags(
        request: ImageKit.files.BulkAddTagsRequest,
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<ImageKit.files.BulkAddTagsResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ImageKitEnvironment.Default,
                "v1/files/addTags",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as ImageKit.files.BulkAddTagsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ImageKit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new ImageKit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ImageKit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new ImageKit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new ImageKit.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ImageKitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ImageKitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ImageKitTimeoutError("Timeout exceeded when calling POST /v1/files/addTags.");
            case "unknown":
                throw new errors.ImageKitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This API removes tags from multiple files in bulk. A maximum of 50 files can be specified at a time.
     *
     * @param {ImageKit.files.BulkRemoveTagsRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ImageKit.BadRequestError}
     * @throws {@link ImageKit.UnauthorizedError}
     * @throws {@link ImageKit.ForbiddenError}
     * @throws {@link ImageKit.NotFoundError}
     * @throws {@link ImageKit.TooManyRequestsError}
     *
     * @example
     *     await client.files.bulk.removeTags({
     *         fileIds: ["598821f949c0a938d57563bd", "598821f949c0a938d57563be"],
     *         tags: ["t-shirt", "round-neck", "sale2019"]
     *     })
     */
    public removeTags(
        request: ImageKit.files.BulkRemoveTagsRequest,
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<ImageKit.files.BulkRemoveTagsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__removeTags(request, requestOptions));
    }

    private async __removeTags(
        request: ImageKit.files.BulkRemoveTagsRequest,
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<ImageKit.files.BulkRemoveTagsResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ImageKitEnvironment.Default,
                "v1/files/removeTags",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as ImageKit.files.BulkRemoveTagsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ImageKit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new ImageKit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ImageKit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new ImageKit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new ImageKit.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ImageKitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ImageKitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ImageKitTimeoutError("Timeout exceeded when calling POST /v1/files/removeTags.");
            case "unknown":
                throw new errors.ImageKitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * This API removes AITags from multiple files in bulk. A maximum of 50 files can be specified at a time.
     *
     * @param {ImageKit.files.BulkRemoveAiTagsRequest} request
     * @param {Bulk.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ImageKit.BadRequestError}
     * @throws {@link ImageKit.UnauthorizedError}
     * @throws {@link ImageKit.ForbiddenError}
     * @throws {@link ImageKit.NotFoundError}
     * @throws {@link ImageKit.TooManyRequestsError}
     *
     * @example
     *     await client.files.bulk.removeAiTags({
     *         fileIds: ["598821f949c0a938d57563bd", "598821f949c0a938d57563be"],
     *         AITags: ["t-shirt", "round-neck", "sale2019"]
     *     })
     */
    public removeAiTags(
        request: ImageKit.files.BulkRemoveAiTagsRequest,
        requestOptions?: Bulk.RequestOptions,
    ): core.HttpResponsePromise<ImageKit.files.BulkRemoveAiTagsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__removeAiTags(request, requestOptions));
    }

    private async __removeAiTags(
        request: ImageKit.files.BulkRemoveAiTagsRequest,
        requestOptions?: Bulk.RequestOptions,
    ): Promise<core.WithRawResponse<ImageKit.files.BulkRemoveAiTagsResponse>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ImageKitEnvironment.Default,
                "v1/files/removeAITags",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as ImageKit.files.BulkRemoveAiTagsResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ImageKit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new ImageKit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ImageKit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new ImageKit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new ImageKit.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ImageKitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ImageKitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ImageKitTimeoutError("Timeout exceeded when calling POST /v1/files/removeAITags.");
            case "unknown":
                throw new errors.ImageKitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        return core.BasicAuth.toAuthorizationHeader({
            username: await core.Supplier.get(this._options.username),
            password: await core.Supplier.get(this._options.password),
        });
    }
}
