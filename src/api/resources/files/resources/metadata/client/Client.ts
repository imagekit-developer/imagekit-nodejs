/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as ImageKit from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Metadata {
    export interface Options {
        environment?: core.Supplier<environments.ImageKitEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        username: core.Supplier<string>;
        password: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Metadata {
    protected readonly _options: Metadata.Options;

    constructor(_options: Metadata.Options) {
        this._options = _options;
    }

    /**
     * You can programmatically get image EXIF, pHash, and other metadata for uploaded files in the ImageKit.io media library using this API.
     *
     * You can also get the metadata in upload API response by passing `metadata` in `responseFields` parameter.
     *
     * @param {string} fileId - The unique `fileId` of the uploaded file. `fileId` is returned in the list and search assets API and upload API.
     * @param {Metadata.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ImageKit.BadRequestError}
     * @throws {@link ImageKit.UnauthorizedError}
     * @throws {@link ImageKit.ForbiddenError}
     * @throws {@link ImageKit.NotFoundError}
     * @throws {@link ImageKit.TooManyRequestsError}
     *
     * @example
     *     await client.files.metadata.get("fileId")
     */
    public get(fileId: string, requestOptions?: Metadata.RequestOptions): core.HttpResponsePromise<ImageKit.Metadata> {
        return core.HttpResponsePromise.fromPromise(this.__get(fileId, requestOptions));
    }

    private async __get(
        fileId: string,
        requestOptions?: Metadata.RequestOptions,
    ): Promise<core.WithRawResponse<ImageKit.Metadata>> {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ImageKitEnvironment.Default,
                `v1/files/${encodeURIComponent(fileId)}/metadata`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as ImageKit.Metadata, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ImageKit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new ImageKit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ImageKit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new ImageKit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new ImageKit.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ImageKitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ImageKitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ImageKitTimeoutError("Timeout exceeded when calling GET /v1/files/{fileId}/metadata.");
            case "unknown":
                throw new errors.ImageKitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get image EXIF, pHash, and other metadata from ImageKit.io powered remote URL using this API.
     *
     * @param {ImageKit.files.MetadataGetFromUrlRequest} request
     * @param {Metadata.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ImageKit.BadRequestError}
     * @throws {@link ImageKit.UnauthorizedError}
     * @throws {@link ImageKit.ForbiddenError}
     * @throws {@link ImageKit.NotFoundError}
     * @throws {@link ImageKit.TooManyRequestsError}
     *
     * @example
     *     await client.files.metadata.getFromUrl({
     *         url: "url"
     *     })
     */
    public getFromUrl(
        request: ImageKit.files.MetadataGetFromUrlRequest,
        requestOptions?: Metadata.RequestOptions,
    ): core.HttpResponsePromise<ImageKit.Metadata> {
        return core.HttpResponsePromise.fromPromise(this.__getFromUrl(request, requestOptions));
    }

    private async __getFromUrl(
        request: ImageKit.files.MetadataGetFromUrlRequest,
        requestOptions?: Metadata.RequestOptions,
    ): Promise<core.WithRawResponse<ImageKit.Metadata>> {
        const { url } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["url"] = url;
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ImageKitEnvironment.Default,
                "v1/files/metadata",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as ImageKit.Metadata, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ImageKit.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new ImageKit.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ImageKit.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new ImageKit.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new ImageKit.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ImageKitError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ImageKitError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ImageKitTimeoutError("Timeout exceeded when calling GET /v1/files/metadata.");
            case "unknown":
                throw new errors.ImageKitError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        return core.BasicAuth.toAuthorizationHeader({
            username: await core.Supplier.get(this._options.username),
            password: await core.Supplier.get(this._options.password),
        });
    }
}
