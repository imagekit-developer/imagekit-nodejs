/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as ImageKit from "../index.js";

/**
 * Object containing details of a successful upload.
 */
export interface Upload {
    /** Unique fileId. Store this fileld in your database, as this will be used to perform update action on this file. */
    fileId?: string;
    /** Name of the asset. */
    name?: string;
    /** The relative path of the file in the media library e.g. `/marketing-assets/new-banner.jpg`. */
    filePath?: string;
    /** A publicly accessible URL of the file. */
    url?: string;
    /** In the case of an image, a small thumbnail URL. */
    thumbnailUrl?: string;
    /** Height of the image in pixels (Only for images) */
    height?: number;
    /** Width of the image in pixels (Only for Images) */
    width?: number;
    /** Size of the image file in Bytes. */
    size?: number;
    /** The bit rate of the video in kbps (only for video). */
    bitRate?: number;
    /** The duration of the video in seconds (only for video). */
    duration?: number;
    /** The audio codec used in the video (only for video). */
    audioCodec?: string;
    /** The video codec used in the video (only for video). */
    videoCodec?: string;
    /** The array of tags associated with the asset. If no tags are set, it will be `null`. Send `tags` in `responseFields` in API request to get the value of this field. */
    tags?: string[];
    /** An array of tags assigned to the uploaded file by auto tagging. */
    AITags?: Upload.AiTags.Item[];
    /** An object containing the file or file version's `id` (versionId) and `name`. */
    versionInfo?: Upload.VersionInfo;
    /** Is the file marked as private. It can be either `true` or `false`. Send `isPrivateFile` in `responseFields` in API request to get the value of this field. */
    isPrivateFile?: boolean;
    /** Is the file published or in draft state. It can be either `true` or `false`. Send `isPublished` in `responseFields` in API request to get the value of this field. */
    isPublished?: boolean;
    /** Value of custom coordinates associated with the image in the format `x,y,width,height`. If `customCoordinates` are not defined, then it is `null`. Send `customCoordinates` in `responseFields` in API request to get the value of this field. */
    customCoordinates?: string;
    /** Type of the uploaded file. Possible values are `image`, `non-image`. */
    fileType?: string;
    /** A key-value data associated with the asset. Use `responseField` in API request to get `customMetadata` in the upload API response. Before setting any custom metadata on an asset, you have to create the field using custom metadata fields API. Send `customMetadata` in `responseFields` in API request to get the value of this field. */
    customMetadata?: Record<string, unknown>;
    /**
     * Extension names with their processing status at the time of completion of the request. It could have one of the following status values:
     *
     * `success`: The extension has been successfully applied.
     * `failed`: The extension has failed and will not be retried.
     * `pending`: The extension will finish processing in some time. On completion, the final status (success / failed) will be sent to the `webhookUrl` provided.
     *
     * If no extension was requested, then this parameter is not returned.
     */
    extensionStatus?: Upload.ExtensionStatus;
    /** Legacy metadata. Send `metadata` in `responseFields` in API request to get metadata in the upload API response. */
    metadata?: ImageKit.Metadata;
    /** Consolidated embedded metadata associated with the file. It includes exif, iptc, and xmp data. Send `embeddedMetadata` in `responseFields` in API request to get embeddedMetadata in the upload API response. */
    embeddedMetadata?: Record<string, unknown>;
}

export namespace Upload {
    export type AiTags = AiTags.Item[];

    export namespace AiTags {
        export interface Item {
            /** Name of the tag. */
            name?: string;
            /** Confidence score of the tag. */
            confidence?: number;
            /** Array of `AITags` associated with the image. If no `AITags` are set, it will be null. These tags can be added using the `google-auto-tagging` or `aws-auto-tagging` extensions. */
            source?: string;
        }
    }

    /**
     * An object containing the file or file version's `id` (versionId) and `name`.
     */
    export interface VersionInfo {
        /** Unique identifier of the file version. */
        id?: string;
        /** Name of the file version. */
        name?: string;
    }

    /**
     * Extension names with their processing status at the time of completion of the request. It could have one of the following status values:
     *
     * `success`: The extension has been successfully applied.
     * `failed`: The extension has failed and will not be retried.
     * `pending`: The extension will finish processing in some time. On completion, the final status (success / failed) will be sent to the `webhookUrl` provided.
     *
     * If no extension was requested, then this parameter is not returned.
     */
    export interface ExtensionStatus {
        "google-auto-tagging"?: ExtensionStatus.GoogleAutoTagging;
        "aws-auto-tagging"?: ExtensionStatus.AwsAutoTagging;
        "remove-bg"?: ExtensionStatus.RemoveBg;
    }

    export namespace ExtensionStatus {
        export type GoogleAutoTagging = "success" | "pending" | "failed";
        export const GoogleAutoTagging = {
            Success: "success",
            Pending: "pending",
            Failed: "failed",
        } as const;
        export type AwsAutoTagging = "success" | "pending" | "failed";
        export const AwsAutoTagging = {
            Success: "success",
            Pending: "pending",
            Failed: "failed",
        } as const;
        export type RemoveBg = "success" | "pending" | "failed";
        export const RemoveBg = {
            Success: "success",
            Pending: "pending",
            Failed: "failed",
        } as const;
    }
}
