/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * Object containing details of a custom metadata field.
 */
export interface CustomMetadataField {
    /** Unique identifier for the custom metadata field. Use this to update the field. */
    id: string;
    /** API name of the custom metadata field. This becomes the key while setting `customMetadata` (key-value object) for an asset using upload or update API. */
    name: string;
    /** Human readable name of the custom metadata field. This name is displayed as form field label to the users while setting field value on the asset in the media library UI. */
    label: string;
    /** An object that describes the rules for the custom metadata field value. */
    schema: CustomMetadataField.Schema;
}

export namespace CustomMetadataField {
    /**
     * An object that describes the rules for the custom metadata field value.
     */
    export interface Schema {
        /** Type of the custom metadata field. */
        type: Schema.Type;
        /** An array of allowed values when field type is `SingleSelect` or `MultiSelect`. */
        selectOptions?: Schema.SelectOptions.Item[];
        /** The default value for this custom metadata field. Date type of default value depends on the field type. */
        defaultValue?: Schema.DefaultValue;
        /** Specifies if the this custom metadata field is required or not. */
        isValueRequired?: boolean;
        /** Minimum value of the field. Only set if field type is `Date` or `Number`. For `Date` type field, the value will be in ISO8601 string format. For `Number` type field, it will be a numeric value. */
        minValue?: Schema.MinValue;
        /** Maximum value of the field. Only set if field type is `Date` or `Number`. For `Date` type field, the value will be in ISO8601 string format. For `Number` type field, it will be a numeric value. */
        maxValue?: Schema.MaxValue;
        /** Minimum length of string. Only set if `type` is set to `Text` or `Textarea`. */
        minLength?: number;
        /** Maximum length of string. Only set if `type` is set to `Text` or `Textarea`. */
        maxLength?: number;
    }

    export namespace Schema {
        /**
         * Type of the custom metadata field.
         */
        export type Type = "Text" | "Textarea" | "Number" | "Date" | "Boolean" | "SingleSelect" | "MultiSelect";
        export const Type = {
            Text: "Text",
            Textarea: "Textarea",
            Number: "Number",
            Date: "Date",
            Boolean: "Boolean",
            SingleSelect: "SingleSelect",
            MultiSelect: "MultiSelect",
        } as const;
        export type SelectOptions = SelectOptions.Item[];

        export namespace SelectOptions {
            export type Item = string | number | boolean;
        }

        /**
         * The default value for this custom metadata field. Date type of default value depends on the field type.
         */
        export type DefaultValue =
            | string
            | number
            | boolean
            /**
             * Default value should be of type array when custom metadata field type is set to `MultiSelect`. */
            | (string | number | boolean)[];
        /**
         * Minimum value of the field. Only set if field type is `Date` or `Number`. For `Date` type field, the value will be in ISO8601 string format. For `Number` type field, it will be a numeric value.
         */
        export type MinValue = string | number;
        /**
         * Maximum value of the field. Only set if field type is `Date` or `Number`. For `Date` type field, the value will be in ISO8601 string format. For `Number` type field, it will be a numeric value.
         */
        export type MaxValue = string | number;
    }
}
