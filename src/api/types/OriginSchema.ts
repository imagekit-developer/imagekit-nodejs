/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as ImageKit from "../index.js";

/**
 * Schema for origin resources.
 */
export type OriginSchema =
    | ImageKit.OriginSchema.S3
    | ImageKit.OriginSchema.S3Compatible
    | ImageKit.OriginSchema.CloudinaryBackup
    | ImageKit.OriginSchema.WebFolder
    | ImageKit.OriginSchema.WebProxy
    | ImageKit.OriginSchema.Gcs
    | ImageKit.OriginSchema.AzureBlob
    | ImageKit.OriginSchema.AkeneoPim;

export namespace OriginSchema {
    export interface S3 {
        type: "S3";
        /** Display name of the origin. */
        name: string;
        /** Whether to send a Canonical header. */
        includeCanonicalHeader?: boolean;
        /** URL used in the Canonical header (if enabled). */
        baseUrlForCanonicalHeader?: string;
        /** S3 bucket name. */
        bucket: string;
        /** Path prefix inside the bucket. */
        prefix?: string;
        /** Access key for the bucket. */
        accessKey: string;
        /** Secret key for the bucket. */
        secretKey: string;
    }

    export interface S3Compatible {
        type: "S3_COMPATIBLE";
        /** Display name of the origin. */
        name: string;
        /** Whether to send a Canonical header. */
        includeCanonicalHeader?: boolean;
        /** URL used in the Canonical header (if enabled). */
        baseUrlForCanonicalHeader?: string;
        /** S3 bucket name. */
        bucket: string;
        /** Path prefix inside the bucket. */
        prefix?: string;
        /** Access key for the bucket. */
        accessKey: string;
        /** Secret key for the bucket. */
        secretKey: string;
        /** Custom S3-compatible endpoint. */
        endpoint: string;
        /** Use path-style S3 URLs? */
        s3ForcePathStyle?: boolean;
    }

    export interface CloudinaryBackup {
        type: "CLOUDINARY_BACKUP";
        /** Display name of the origin. */
        name: string;
        /** Whether to send a Canonical header. */
        includeCanonicalHeader?: boolean;
        /** URL used in the Canonical header (if enabled). */
        baseUrlForCanonicalHeader?: string;
        /** S3 bucket name. */
        bucket: string;
        /** Path prefix inside the bucket. */
        prefix?: string;
        /** Access key for the bucket. */
        accessKey: string;
        /** Secret key for the bucket. */
        secretKey: string;
    }

    export interface WebFolder {
        type: "WEB_FOLDER";
        /** Display name of the origin. */
        name: string;
        /** Whether to send a Canonical header. */
        includeCanonicalHeader?: boolean;
        /** URL used in the Canonical header (if enabled). */
        baseUrlForCanonicalHeader?: string;
        /** Root URL for the web folder origin. */
        baseUrl: string;
        /** Forward the Host header to origin? */
        forwardHostHeaderToOrigin?: boolean;
    }

    export interface WebProxy {
        type: "WEB_PROXY";
        /** Display name of the origin. */
        name: string;
        /** Whether to send a Canonical header. */
        includeCanonicalHeader?: boolean;
        /** URL used in the Canonical header (if enabled). */
        baseUrlForCanonicalHeader?: string;
    }

    export interface Gcs {
        type: "GCS";
        /** Display name of the origin. */
        name: string;
        /** Whether to send a Canonical header. */
        includeCanonicalHeader?: boolean;
        /** URL used in the Canonical header (if enabled). */
        baseUrlForCanonicalHeader?: string;
        bucket: string;
        prefix?: string;
        clientEmail: string;
        privateKey: string;
    }

    export interface AzureBlob {
        type: "AZURE_BLOB";
        /** Display name of the origin. */
        name: string;
        /** Whether to send a Canonical header. */
        includeCanonicalHeader?: boolean;
        /** URL used in the Canonical header (if enabled). */
        baseUrlForCanonicalHeader?: string;
        container: string;
        prefix?: string;
        accountName: string;
        sasToken: string;
    }

    export interface AkeneoPim {
        type: "AKENEO_PIM";
        /** Display name of the origin. */
        name: string;
        /** Whether to send a Canonical header. */
        includeCanonicalHeader?: boolean;
        /** URL used in the Canonical header (if enabled). */
        baseUrlForCanonicalHeader?: string;
        /** Akeneo instance base URL. */
        baseUrl: string;
        /** Akeneo API client ID. */
        clientId: string;
        /** Akeneo API client secret. */
        clientSecret: string;
        /** Akeneo API username. */
        username: string;
        /** Akeneo API password. */
        password: string;
    }
}
