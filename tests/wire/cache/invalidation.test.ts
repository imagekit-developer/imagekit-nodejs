/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ImageKitClient } from "../../../src/Client";

describe("Invalidation", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { url: "https://ik.imagekit.io/your_imagekit_id/default-image.jpg" };
        const rawResponseBody = { requestId: "requestId" };
        server
            .mockEndpoint()
            .post("/v1/files/purge")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.cache.invalidation.create({
            url: "https://ik.imagekit.io/your_imagekit_id/default-image.jpg",
        });
        expect(response).toEqual({
            requestId: "requestId",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "Pending" };
        server
            .mockEndpoint()
            .get("/v1/files/purge/requestId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.cache.invalidation.get("requestId");
        expect(response).toEqual({
            status: "Pending",
        });
    });
});
