/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ImageKitClient } from "../../src/Client";

describe("Files", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = {
            fileId: "598821f949c0a938d57563bd",
            type: "file",
            name: "file.jpg",
            filePath: "/images/products/file.jpg",
            tags: ["t-shirt", "round-neck", "sale2019"],
            AITags: [
                { name: "Shirt", confidence: 90.12, source: "google-auto-tagging" },
                { name: "T-shirt", confidence: 80.12, source: "aws-auto-tagging" },
            ],
            versionInfo: { id: "598821f949c0a938d57563bd", name: "Version 1" },
            isPrivateFile: false,
            isPublished: true,
            url: "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?updatedAt=1566630881313",
            thumbnail:
                "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?updatedAt=1566630881313&tr=n-ik_ml_thumbnail",
            fileType: "image",
            mime: "image/jpeg",
            width: 100,
            height: 100,
            size: 100,
            hasAlpha: false,
            customMetadata: { brand: "Nike", color: "red" },
            createdAt: "2019-08-24T06:14:41.313Z",
            updatedAt: "2019-08-24T06:14:41.313Z",
        };
        server
            .mockEndpoint()
            .get("/v1/files/fileId/details")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.get("fileId");
        expect(response).toEqual({
            fileId: "598821f949c0a938d57563bd",
            type: "file",
            name: "file.jpg",
            filePath: "/images/products/file.jpg",
            tags: ["t-shirt", "round-neck", "sale2019"],
            AITags: [
                {
                    name: "Shirt",
                    confidence: 90.12,
                    source: "google-auto-tagging",
                },
                {
                    name: "T-shirt",
                    confidence: 80.12,
                    source: "aws-auto-tagging",
                },
            ],
            versionInfo: {
                id: "598821f949c0a938d57563bd",
                name: "Version 1",
            },
            isPrivateFile: false,
            isPublished: true,
            url: "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?updatedAt=1566630881313",
            thumbnail:
                "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?updatedAt=1566630881313&tr=n-ik_ml_thumbnail",
            fileType: "image",
            mime: "image/jpeg",
            width: 100,
            height: 100,
            size: 100,
            hasAlpha: false,
            customMetadata: {
                brand: "Nike",
                color: "red",
            },
            createdAt: "2019-08-24T06:14:41.313Z",
            updatedAt: "2019-08-24T06:14:41.313Z",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            removeAITags: ["car", "vehicle", "motorsports"],
            webhookUrl: "https://webhook.site/0d6b6c7a-8e5a-4b3a-8b7c-0d6b6c7a8e5a",
            extensions: [
                { name: "remove-bg", options: { add_shadow: true } },
                { name: "google-auto-tagging", minConfidence: 80, maxTags: 10 },
                { name: "aws-auto-tagging", minConfidence: 80, maxTags: 10 },
                { name: "ai-auto-description" },
            ],
            tags: ["tag1", "tag2"],
            customCoordinates: "10,10,100,100",
            customMetadata: { brand: "Nike", color: "red" },
        };
        const rawResponseBody = {
            fileId: "598821f949c0a938d57563bd",
            type: "file",
            name: "file1.jpg",
            filePath: "/images/products/file.jpg",
            tags: ["t-shirt", "round-neck", "sale2019"],
            AITags: [
                { name: "Shirt", confidence: 90.12, source: "google-auto-tagging" },
                { name: "T-shirt", confidence: 80.12, source: "aws-auto-tagging" },
            ],
            versionInfo: { id: "598821f949c0a938d57563bd", name: "Version 1" },
            isPrivateFile: false,
            isPublished: true,
            url: "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?updatedAt=1566630881313",
            thumbnail:
                "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?updatedAt=1566630881313&tr=n-ik_ml_thumbnail",
            fileType: "image",
            mime: "image/jpeg",
            width: 100,
            height: 100,
            size: 100,
            hasAlpha: false,
            customMetadata: { brand: "Nike", color: "red" },
            createdAt: "2019-08-24T06:14:41.313Z",
            updatedAt: "2019-08-24T06:14:41.313Z",
            extensionStatus: {
                "google-auto-tagging": "success",
                "aws-auto-tagging": "success",
                "remove-bg": "pending",
                "ai-auto-description": "success",
            },
        };
        server
            .mockEndpoint()
            .patch("/v1/files/fileId/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.update("fileId", {
            removeAITags: ["car", "vehicle", "motorsports"],
            webhookUrl: "https://webhook.site/0d6b6c7a-8e5a-4b3a-8b7c-0d6b6c7a8e5a",
            extensions: [
                {
                    name: "remove-bg",
                    options: {
                        add_shadow: true,
                    },
                },
                {
                    name: "google-auto-tagging",
                    minConfidence: 80,
                    maxTags: 10,
                },
                {
                    name: "aws-auto-tagging",
                    minConfidence: 80,
                    maxTags: 10,
                },
                {
                    name: "ai-auto-description",
                },
            ],
            tags: ["tag1", "tag2"],
            customCoordinates: "10,10,100,100",
            customMetadata: {
                brand: "Nike",
                color: "red",
            },
        });
        expect(response).toEqual({
            fileId: "598821f949c0a938d57563bd",
            type: "file",
            name: "file1.jpg",
            filePath: "/images/products/file.jpg",
            tags: ["t-shirt", "round-neck", "sale2019"],
            AITags: [
                {
                    name: "Shirt",
                    confidence: 90.12,
                    source: "google-auto-tagging",
                },
                {
                    name: "T-shirt",
                    confidence: 80.12,
                    source: "aws-auto-tagging",
                },
            ],
            versionInfo: {
                id: "598821f949c0a938d57563bd",
                name: "Version 1",
            },
            isPrivateFile: false,
            isPublished: true,
            url: "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?updatedAt=1566630881313",
            thumbnail:
                "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?updatedAt=1566630881313&tr=n-ik_ml_thumbnail",
            fileType: "image",
            mime: "image/jpeg",
            width: 100,
            height: 100,
            size: 100,
            hasAlpha: false,
            customMetadata: {
                brand: "Nike",
                color: "red",
            },
            createdAt: "2019-08-24T06:14:41.313Z",
            updatedAt: "2019-08-24T06:14:41.313Z",
            extensionStatus: {
                "google-auto-tagging": "success",
                "aws-auto-tagging": "success",
                "remove-bg": "pending",
                "ai-auto-description": "success",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v1/files/fileId").respondWith().statusCode(200).build();

        const response = await client.files.delete("fileId");
        expect(response).toEqual(undefined);
    });

    test("copy", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { sourceFilePath: "/path/to/file.jpg", destinationPath: "/folder/to/copy/into/" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v1/files/copy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.copy({
            sourceFilePath: "/path/to/file.jpg",
            destinationPath: "/folder/to/copy/into/",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("move", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { sourceFilePath: "/path/to/file.jpg", destinationPath: "/folder/to/move/into/" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v1/files/move")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.move({
            sourceFilePath: "/path/to/file.jpg",
            destinationPath: "/folder/to/move/into/",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("rename", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { filePath: "/path/to/file.jpg", newFileName: "newFileName.jpg" };
        const rawResponseBody = { purgeRequestId: "purgeRequestId" };
        server
            .mockEndpoint()
            .put("/v1/files/rename")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.rename({
            filePath: "/path/to/file.jpg",
            newFileName: "newFileName.jpg",
        });
        expect(response).toEqual({
            purgeRequestId: "purgeRequestId",
        });
    });
});
