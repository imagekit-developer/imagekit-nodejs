/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ImageKitClient } from "../../src/Client";

describe("Folders", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { folderName: "summer", parentFolderPath: "/product/images/" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v1/folder")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.folders.create({
            folderName: "summer",
            parentFolderPath: "/product/images/",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { folderPath: "/folder/to/delete/" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/folder")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.folders.delete({
            folderPath: "/folder/to/delete/",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("copy", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            sourceFolderPath: "/path/of/source/folder",
            destinationPath: "/path/of/destination/folder",
        };
        const rawResponseBody = { jobId: "jobId" };
        server
            .mockEndpoint()
            .post("/v1/bulkJobs/copyFolder")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.folders.copy({
            sourceFolderPath: "/path/of/source/folder",
            destinationPath: "/path/of/destination/folder",
        });
        expect(response).toEqual({
            jobId: "jobId",
        });
    });

    test("move", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            sourceFolderPath: "/path/of/source/folder",
            destinationPath: "/path/of/destination/folder",
        };
        const rawResponseBody = { jobId: "jobId" };
        server
            .mockEndpoint()
            .post("/v1/bulkJobs/moveFolder")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.folders.move({
            sourceFolderPath: "/path/of/source/folder",
            destinationPath: "/path/of/destination/folder",
        });
        expect(response).toEqual({
            jobId: "jobId",
        });
    });

    test("rename", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { folderPath: "/path/of/folder", newFolderName: "new-folder-name" };
        const rawResponseBody = { jobId: "jobId" };
        server
            .mockEndpoint()
            .post("/v1/bulkJobs/renameFolder")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.folders.rename({
            folderPath: "/path/of/folder",
            newFolderName: "new-folder-name",
        });
        expect(response).toEqual({
            jobId: "jobId",
        });
    });
});
