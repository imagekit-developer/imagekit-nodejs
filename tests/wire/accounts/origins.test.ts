/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ImageKitClient } from "../../../src/Client";

describe("Origins", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                name: "US S3 Storage",
                includeCanonicalHeader: false,
                baseUrlForCanonicalHeader: "https://cdn.example.com",
                bucket: "product-images",
                prefix: { key: "value" },
                id: "id",
                type: "S3",
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/accounts/origins")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.origins.list();
        expect(response).toEqual([
            {
                type: "S3",
                name: "US S3 Storage",
                includeCanonicalHeader: false,
                baseUrlForCanonicalHeader: "https://cdn.example.com",
                bucket: "product-images",
                prefix: {
                    key: "value",
                },
                id: "id",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "US S3 Storage",
            bucket: "product-images",
            accessKey: "AKIAIOSFODNN7EXAMPLE",
            secretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
            type: "S3",
        };
        const rawResponseBody = {
            name: "US S3 Storage",
            includeCanonicalHeader: false,
            baseUrlForCanonicalHeader: "https://cdn.example.com",
            bucket: "product-images",
            prefix: { key: "value" },
            id: "id",
            type: "S3",
        };
        server
            .mockEndpoint()
            .post("/v1/accounts/origins")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.origins.create({
            type: "S3",
            name: "US S3 Storage",
            bucket: "product-images",
            accessKey: "AKIAIOSFODNN7EXAMPLE",
            secretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
        });
        expect(response).toEqual({
            type: "S3",
            name: "US S3 Storage",
            includeCanonicalHeader: false,
            baseUrlForCanonicalHeader: "https://cdn.example.com",
            bucket: "product-images",
            prefix: {
                key: "value",
            },
            id: "id",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "US S3 Storage",
            includeCanonicalHeader: false,
            baseUrlForCanonicalHeader: "https://cdn.example.com",
            bucket: "product-images",
            prefix: { key: "value" },
            id: "id",
            type: "S3",
        };
        server
            .mockEndpoint()
            .get("/v1/accounts/origins/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.origins.get("id");
        expect(response).toEqual({
            type: "S3",
            name: "US S3 Storage",
            includeCanonicalHeader: false,
            baseUrlForCanonicalHeader: "https://cdn.example.com",
            bucket: "product-images",
            prefix: {
                key: "value",
            },
            id: "id",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "US S3 Storage",
            bucket: "product-images",
            accessKey: "AKIAIOSFODNN7EXAMPLE",
            secretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
            type: "S3",
        };
        const rawResponseBody = {
            name: "US S3 Storage",
            includeCanonicalHeader: false,
            baseUrlForCanonicalHeader: "https://cdn.example.com",
            bucket: "product-images",
            prefix: { key: "value" },
            id: "id",
            type: "S3",
        };
        server
            .mockEndpoint()
            .put("/v1/accounts/origins/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.origins.update("id", {
            type: "S3",
            name: "US S3 Storage",
            bucket: "product-images",
            accessKey: "AKIAIOSFODNN7EXAMPLE",
            secretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
        });
        expect(response).toEqual({
            type: "S3",
            name: "US S3 Storage",
            includeCanonicalHeader: false,
            baseUrlForCanonicalHeader: "https://cdn.example.com",
            bucket: "product-images",
            prefix: {
                key: "value",
            },
            id: "id",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v1/accounts/origins/id").respondWith().statusCode(200).build();

        const response = await client.accounts.origins.delete("id");
        expect(response).toEqual(undefined);
    });
});
