/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ImageKitClient } from "../../../src/Client";

describe("UrlEndpoints", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                description: "My custom URL endpoint",
                urlPrefix: "product-images",
                origins: ["origin-id-1", "origin-id-2"],
                urlRewriter: { preserveAssetDeliveryTypes: true, type: "CLOUDINARY" },
                id: "id",
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/accounts/url-endpoints")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.urlEndpoints.list();
        expect(response).toEqual([
            {
                description: "My custom URL endpoint",
                urlPrefix: "product-images",
                origins: ["origin-id-1", "origin-id-2"],
                urlRewriter: {
                    type: "CLOUDINARY",
                    preserveAssetDeliveryTypes: true,
                },
                id: "id",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1"],
        };
        const rawResponseBody = {
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1", "origin-id-2"],
            urlRewriter: { preserveAssetDeliveryTypes: true, type: "CLOUDINARY" },
            id: "id",
        };
        server
            .mockEndpoint()
            .post("/v1/accounts/url-endpoints")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.urlEndpoints.create({
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1"],
        });
        expect(response).toEqual({
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1", "origin-id-2"],
            urlRewriter: {
                type: "CLOUDINARY",
                preserveAssetDeliveryTypes: true,
            },
            id: "id",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = {
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1", "origin-id-2"],
            urlRewriter: { preserveAssetDeliveryTypes: true, type: "CLOUDINARY" },
            id: "id",
        };
        server
            .mockEndpoint()
            .get("/v1/accounts/url-endpoints/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.urlEndpoints.get("id");
        expect(response).toEqual({
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1", "origin-id-2"],
            urlRewriter: {
                type: "CLOUDINARY",
                preserveAssetDeliveryTypes: true,
            },
            id: "id",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1"],
        };
        const rawResponseBody = {
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1", "origin-id-2"],
            urlRewriter: { preserveAssetDeliveryTypes: true, type: "CLOUDINARY" },
            id: "id",
        };
        server
            .mockEndpoint()
            .put("/v1/accounts/url-endpoints/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.accounts.urlEndpoints.update("id", {
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1"],
        });
        expect(response).toEqual({
            description: "My custom URL endpoint",
            urlPrefix: "product-images",
            origins: ["origin-id-1", "origin-id-2"],
            urlRewriter: {
                type: "CLOUDINARY",
                preserveAssetDeliveryTypes: true,
            },
            id: "id",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v1/accounts/url-endpoints/id").respondWith().statusCode(200).build();

        const response = await client.accounts.urlEndpoints.delete("id");
        expect(response).toEqual(undefined);
    });
});
