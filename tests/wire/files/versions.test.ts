/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ImageKitClient } from "../../../src/Client";

describe("Versions", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                fileId: "fileId",
                type: "type",
                name: "name",
                filePath: "filePath",
                tags: ["tags"],
                AITags: [{}],
                versionInfo: { id: "id", name: "name" },
                isPrivateFile: true,
                isPublished: true,
                customCoordinates: "customCoordinates",
                url: "url",
                thumbnail: "thumbnail",
                fileType: "fileType",
                mime: "mime",
                width: 1.1,
                height: 1.1,
                size: 1.1,
                hasAlpha: true,
                customMetadata: { key: "value" },
                createdAt: "createdAt",
                updatedAt: "updatedAt",
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/files/fileId/versions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.versions.list("fileId");
        expect(response).toEqual([
            {
                fileId: "fileId",
                type: "type",
                name: "name",
                filePath: "filePath",
                tags: ["tags"],
                AITags: [{}],
                versionInfo: {
                    id: "id",
                    name: "name",
                },
                isPrivateFile: true,
                isPublished: true,
                customCoordinates: "customCoordinates",
                url: "url",
                thumbnail: "thumbnail",
                fileType: "fileType",
                mime: "mime",
                width: 1.1,
                height: 1.1,
                size: 1.1,
                hasAlpha: true,
                customMetadata: {
                    key: "value",
                },
                createdAt: "createdAt",
                updatedAt: "updatedAt",
            },
        ]);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = {
            fileId: "598821f949c0a938d81963bd",
            type: "file-version",
            name: "file.jpg",
            filePath: "/images/products/file.jpg",
            tags: ["t-shirt", "sale2019"],
            AITags: [
                { name: "Shirt", confidence: 90.12, source: "google-auto-tagging" },
                { name: "T-shirt", confidence: 80.12, source: "aws-auto-tagging" },
            ],
            versionInfo: { id: "598821f949c0a938d57563bd", name: "Version 1" },
            isPrivateFile: false,
            isPublished: true,
            url: "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4&updatedAt=1566630881313",
            thumbnail:
                "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4&updatedAt=1566630881313&tr=n-ik_ml_thumbnail",
            fileType: "image",
            mime: "image/jpeg",
            width: 100,
            height: 100,
            size: 100,
            hasAlpha: false,
            customMetadata: { brand: "Nike", color: "red" },
            createdAt: "2019-08-24T06:15:41.313Z",
            updatedAt: "2019-08-24T06:15:41.313Z",
        };
        server
            .mockEndpoint()
            .get("/v1/files/fileId/versions/versionId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.versions.get("fileId", "versionId");
        expect(response).toEqual({
            fileId: "598821f949c0a938d81963bd",
            type: "file-version",
            name: "file.jpg",
            filePath: "/images/products/file.jpg",
            tags: ["t-shirt", "sale2019"],
            AITags: [
                {
                    name: "Shirt",
                    confidence: 90.12,
                    source: "google-auto-tagging",
                },
                {
                    name: "T-shirt",
                    confidence: 80.12,
                    source: "aws-auto-tagging",
                },
            ],
            versionInfo: {
                id: "598821f949c0a938d57563bd",
                name: "Version 1",
            },
            isPrivateFile: false,
            isPublished: true,
            url: "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4&updatedAt=1566630881313",
            thumbnail:
                "https://ik.imagekit.io/your_imagekit_id/images/products/file.jpg?ik-obj-version=iAg8gxkqo_QUBwqNeQrJzuyce2XB7Gc4&updatedAt=1566630881313&tr=n-ik_ml_thumbnail",
            fileType: "image",
            mime: "image/jpeg",
            width: 100,
            height: 100,
            size: 100,
            hasAlpha: false,
            customMetadata: {
                brand: "Nike",
                color: "red",
            },
            createdAt: "2019-08-24T06:15:41.313Z",
            updatedAt: "2019-08-24T06:15:41.313Z",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/files/fileId/versions/versionId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.versions.delete("fileId", "versionId");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("restore", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = {
            fileId: "fileId",
            type: "type",
            name: "name",
            filePath: "filePath",
            tags: ["tags"],
            AITags: [{ name: "name", confidence: 1.1, source: "source" }],
            versionInfo: { id: "id", name: "name" },
            isPrivateFile: true,
            isPublished: true,
            customCoordinates: "customCoordinates",
            url: "url",
            thumbnail: "thumbnail",
            fileType: "fileType",
            mime: "mime",
            width: 1.1,
            height: 1.1,
            size: 1.1,
            hasAlpha: true,
            customMetadata: { key: "value" },
            createdAt: "createdAt",
            updatedAt: "updatedAt",
        };
        server
            .mockEndpoint()
            .put("/v1/files/fileId/versions/versionId/restore")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.versions.restore("fileId", "versionId");
        expect(response).toEqual({
            fileId: "fileId",
            type: "type",
            name: "name",
            filePath: "filePath",
            tags: ["tags"],
            AITags: [
                {
                    name: "name",
                    confidence: 1.1,
                    source: "source",
                },
            ],
            versionInfo: {
                id: "id",
                name: "name",
            },
            isPrivateFile: true,
            isPublished: true,
            customCoordinates: "customCoordinates",
            url: "url",
            thumbnail: "thumbnail",
            fileType: "fileType",
            mime: "mime",
            width: 1.1,
            height: 1.1,
            size: 1.1,
            hasAlpha: true,
            customMetadata: {
                key: "value",
            },
            createdAt: "createdAt",
            updatedAt: "updatedAt",
        });
    });
});
