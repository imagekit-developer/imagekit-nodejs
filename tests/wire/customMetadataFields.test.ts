/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ImageKitClient } from "../../src/Client";

describe("CustomMetadataFields", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "598821f949c0a938d57563dd",
                name: "brand",
                label: "brand",
                schema: {
                    type: "Text",
                    selectOptions: ["small", "medium", "large", 30, 40, true],
                    defaultValue: "Nike",
                    isValueRequired: true,
                    minValue: "minValue",
                    maxValue: "maxValue",
                    minLength: 1.1,
                    maxLength: 1.1,
                },
            },
            {
                id: "865421f949c0a835d57563dd",
                name: "price",
                label: "price",
                schema: {
                    type: "Number",
                    selectOptions: ["small", "medium", "large", 30, 40, true],
                    defaultValue: "defaultValue",
                    isValueRequired: true,
                    minValue: 1000,
                    maxValue: 3000,
                    minLength: 1.1,
                    maxLength: 1.1,
                },
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/customMetadataFields")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customMetadataFields.list();
        expect(response).toEqual([
            {
                id: "598821f949c0a938d57563dd",
                name: "brand",
                label: "brand",
                schema: {
                    type: "Text",
                    selectOptions: ["small", "medium", "large", 30, 40, true],
                    defaultValue: "Nike",
                    isValueRequired: true,
                    minValue: "minValue",
                    maxValue: "maxValue",
                    minLength: 1.1,
                    maxLength: 1.1,
                },
            },
            {
                id: "865421f949c0a835d57563dd",
                name: "price",
                label: "price",
                schema: {
                    type: "Number",
                    selectOptions: ["small", "medium", "large", 30, 40, true],
                    defaultValue: "defaultValue",
                    isValueRequired: true,
                    minValue: 1000,
                    maxValue: 3000,
                    minLength: 1.1,
                    maxLength: 1.1,
                },
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "price",
            label: "price",
            schema: { type: "Number", minValue: 1000, maxValue: 3000 },
        };
        const rawResponseBody = {
            id: "598821f949c0a938d57563dd",
            name: "price",
            label: "price",
            schema: {
                type: "Number",
                selectOptions: ["small", "medium", "large", 30, 40, true],
                defaultValue: "defaultValue",
                isValueRequired: true,
                minValue: 1000,
                maxValue: 3000,
                minLength: 1.1,
                maxLength: 1.1,
            },
        };
        server
            .mockEndpoint()
            .post("/v1/customMetadataFields")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customMetadataFields.create({
            name: "price",
            label: "price",
            schema: {
                type: "Number",
                minValue: 1000,
                maxValue: 3000,
            },
        });
        expect(response).toEqual({
            id: "598821f949c0a938d57563dd",
            name: "price",
            label: "price",
            schema: {
                type: "Number",
                selectOptions: ["small", "medium", "large", 30, 40, true],
                defaultValue: "defaultValue",
                isValueRequired: true,
                minValue: 1000,
                maxValue: 3000,
                minLength: 1.1,
                maxLength: 1.1,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/customMetadataFields/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customMetadataFields.delete("id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ImageKitClient({ username: "test", password: "test", environment: server.baseUrl });
        const rawRequestBody = { label: "price", schema: { minValue: 1000, maxValue: 3000 } };
        const rawResponseBody = {
            id: "598821f949c0a938d57563dd",
            name: "price",
            label: "price",
            schema: {
                type: "Number",
                selectOptions: ["small", "medium", "large", 30, 40, true],
                defaultValue: "defaultValue",
                isValueRequired: true,
                minValue: 1000,
                maxValue: 3000,
                minLength: 1.1,
                maxLength: 1.1,
            },
        };
        server
            .mockEndpoint()
            .patch("/v1/customMetadataFields/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customMetadataFields.update("id", {
            label: "price",
            schema: {
                minValue: 1000,
                maxValue: 3000,
            },
        });
        expect(response).toEqual({
            id: "598821f949c0a938d57563dd",
            name: "price",
            label: "price",
            schema: {
                type: "Number",
                selectOptions: ["small", "medium", "large", 30, 40, true],
                defaultValue: "defaultValue",
                isValueRequired: true,
                minValue: 1000,
                maxValue: 3000,
                minLength: 1.1,
                maxLength: 1.1,
            },
        });
    });
});
